Created base util http request functions using Riot's endpoints to pull basic account and match information. Created additional helper functions for unix time conversion and csv read/write.

Created consts file to more easily keep track of commonly used values and more importantly minimze the number of web requests I make, as there is a capped rate. These include the personal API key to interact with Riot's servers, relevant unix timestamps, and account IDs for me and friends. The .json responses for match info uses codes for certain in-game features so I've also written those codes down for clarity. Will have to double check at some point down the line to make sure the codes didn't change. But right now correctly ensuring the pulled codes are the up to date ones are not worth the added complexity.

Started drafting user class, which is what will created every time an account is updated with new matches. The user class will create new dataframes for accounts that have never been looked up, and load existing ones for returning users. The most important function is the update() function, which will poll multiple endpoints to correctly update the players' dataframes.
Each match is identified by an ID, and each ID can be processed to retrieve the large .json of match metrics. If the IDs are too old, it will be impossible to retrieve them, but if you already have the IDs, you can still process them. Therefore the goal of update() is to process each match that comes in but also save the associated ID for futureproofing in case additional analytics/features for the project are to be added. Whenever new ones are added, the app will instead use the list of saved match IDs, which allows it to see matches they may be too old to receive through the API, but also reduce the number of requests. A modified version of update(), called reshape(), will be utilized for this. 

Optimized update() to reduce number of API requests. The match IDs are pulled in batches, and you can choose how many at a time you want to pull. I've created some logic to efficiently choose this number each time it runs based on the previous batch to optimize the number of calls.

Added failsafes to update(). In the event an "ERROR XXX" occurs during an API call, it will cancel the update and revert back to the state before the update was ran, prompting the user to try again later.